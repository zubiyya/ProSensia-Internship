#!/usr/bin/env python
# coding: utf-8

# In[108]:


import os
with open("env.txt") as f:
    for line in f:
        if line.strip():
            key, value = line.strip().split("=", 1)
            os.environ[key] = value.strip()

print("Key loaded:", "GEMINI_API_KEY" in os.environ)


# In[112]:


import google.generativeai as genai
import os

genai.configure(api_key="your_gemini_api") 

MODEL = "gemini-1.5-flash"  

def run_chat(prompt, **params):
    generation_config = {
        "temperature": params.get("temperature", 0.9), 
        "max_output_tokens": params.get("max_tokens", 2048),
    }
    
    safety_settings = [
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
    ]
    
    model = genai.GenerativeModel(
        model_name=MODEL,
        generation_config=generation_config,
        safety_settings=safety_settings
    )
    
    response = model.generate_content(prompt)
    return response.text, response.usage_metadata 

cold, usage_cold = run_chat("Give 3 catchy taglines for a book tracker app.", temperature=0.1)
hot, usage_hot = run_chat("Give 3 catchy taglines for a book tracker app.", temperature=1.0)

print("=== Temperature = 0.1 ===\n", cold, "\nTokens:", usage_cold)
print("\n=== Temperature = 1.0 ===\n", hot, "\nTokens:", usage_hot)


# In[114]:


fewshot_prompt = """You are an expert librarian. You must output in JSON format only.

Example:
{
  "title": "The Hobbit",
  "genre": "Fantasy",
  "themes": ["adventure", "courage", "friendship"]
}

Now summarize the book 'Truly Devious' in the exact same JSON format.
"""
json_out, usage_json = run_chat(fewshot_prompt, temperature=0.3)
print("\n=== Few-shot JSON Demo ===\n", json_out, "\nTokens:", usage_json)


# In[118]:


import google.generativeai as genai

MODEL = "gemini-1.5-flash"

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

penalty_prompt = "List tips for writing consistent prompts. End last bullet with <END>."

generation_config = genai.types.GenerationConfig(
    temperature=0.4,
    stop_sequences=["<END>"],
    max_output_tokens=2048,
)

model = genai.GenerativeModel(model_name=MODEL)

response = model.generate_content(
    penalty_prompt,
    generation_config=generation_config,
    safety_settings=safety_settings 
)

stop_out = response.text
usage_stop = getattr(response, 'usage_metadata', 'N/A')

print("\n=== Stop Sequence Demo ===\n", stop_out, "\nTokens:", usage_stop)


# In[ ]:
